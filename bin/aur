#!/usr/bin/env ruby
# frozen_string_literal: true

require 'docopt'
require 'pathname'
require_relative '../lib/aur/action'

CMDS = %i[bump
          flac2mp3
          help
          info
          inumber
          lintdir
          name2num
          name2tag
          num2name
          reencode
          set
          sort
          split
          strip
          tag2name
          transcode
          verify].freeze

docopt = <<~EOCMDS
  Usage:
    aur set <tag> <value> <file>...
    aur tag2name <file>...
    aur name2tag <file>...
    aur num2name <file>...
    aur name2num <file>...
    aur inumber <file>...
    aur strip <file>...
    aur bump <number> <file>...
    aur split <file>...
    aur info <file>...
    aur sort <file>...
    aur verify <file>...
    aur flac2mp3 <file>...
    aur transcode <newtype> <file>...
    aur reencode <file>...
    aur lintdir <file>...
    aur help <command>
EOCMDS

def sanitize_keys(options)
  options.transform_keys { |k| k.to_s.delete('-').to_sym }
end

def errors(errs)
  return if errs.empty?

  warn "Completed with #{errs.size} errors."
  errs.each { |err| warn "  #{err}" }
  exit 1
end

begin
  opts = sanitize_keys(Docopt.docopt(docopt))
rescue Docopt::Exit => e
  abort e.message
end

CMDS.each do |cmd|
  next unless opts[cmd]

  cmd = Aur::Action.new(cmd, opts[:'<file>'], opts)
  cmd.run!
  errors(cmd.errs)
  exit
end

abort 'Unhandled command.'
