#!/usr/bin/env ruby
# frozen_string_literal: true

require 'docopt'
require 'pathname'
require_relative '../lib/aur/command'

ME = Pathname.new(__FILE__).basename.to_s

CMDS = %i[info verify split tag2name name2tag numname sort inumber].freeze

docopt = CMDS.each_with_object(['  Usage:']) do |cmd, a|
  a.<< "  #{ME} #{cmd} <file>..."
end.join("\n")

def sanitize_keys(options)
  options.each_with_object({}) do |(k, v), r|
    r[k.to_s.delete('-').to_sym] = v
  end
end

def errors(errs)
  return if errs.empty?

  warn "Completed with #{errs.size} errors."
  errs.each { |err| warn "  #{err}" }
  exit 1
end

begin
  opts = sanitize_keys(Docopt.docopt(docopt))
rescue Docopt::Exit => e
  abort e.message
end

CMDS.each do |cmd|
  next unless opts[cmd]

  cmd = Aur::Command.new(cmd, ARGV)
  cmd.run!
  errors(cmd.errs)
  exit
end

abort 'Dunno what to do.'
